filter {
    if [dns] {
      # Process common parts
      mutate {
        rename => {"[dns][rrname]" => "[dns][question][name]"}
        rename => {"[dns][rrtype]" => "[dns][question][type]"}
        rename => {"[dns][tx_id]" => "[suricata][dns][tx_id]"}
        rename => {"[dns][rcode]" => "[dns][response_code]"}
        remove_field => "[dns][flags]"
      }

      if [dns][type] == "answer" and ![dns][version] {
        # This is Suricata DNS format v1
        mutate {
          copy => {"[dns][rrname]" => "[dns][question][name]"}
	  rename => {"[dns][rrname]" => "[dns][answer][name]"}
          rename => {"[dns][rdata]" => "[dns][answer][data]"}
          rename => {"[dns][rrtype]" => "[dns][answer][type]"}
          rename => {"[dns][rrtype]" => "[dns][answer][type]"}
          rename => {"[dns][ttl]" => "[dns][answer][ttl]"}

          add_field => { "[dns][answers]" => [] }
          add_field => { "[dns][answers]" => "[dns][answer]" }

          remove_field => { "[dns][answer]" }
        }
      }
      else if [dns][type] == "answer" and [dns][version] == 2 {

        mutate { 
          copy => {"[dns][rrname]" => "[dns][question][name]"}
        } 

        # This is Suricata DNS format v2, nested answers
        ruby {
          code => '
            answers = event.get("[dns][answers]")
            if answers.nil?
              return
            end

            event.remove("[dns][answers]")
            resolved_ips = []
            answers.each do |answer|
              answer["name"] = answer.delete("rrname")
              answer["type"] = answer.delete("rrtype")
              answer["data"] = answer.delete("rdata")

              if ["A", "AAAA"].include?  answer["type"]
                resolved_ips.push(answer["data"])
              end
            end

            event.set("[dns][answers]", resolved_ips)

            header_flags = []
            header_flags.push("AA") if event.get('[dns][aa]')?
            header_flags.push("QR") if event.get('[dns][qr]')?
            header_flags.push("RA") if event.get('[dns][ra]')?
            header_flags.push("RD") if event.get('[dns][rd]')?
            header_flags.push("TC") if event.get('[dns][tc]')?
            event.set("[dns][header_flags]", header_flags)
          '

          remove_field => "[dns][aa]"
          remove_field => "[dns][qr]"
          remove_field => "[dns][ra]"
          remove_field => "[dns][rd]"
          remove_field => "[dns][tc]"
          remove_field => "[dns][version]"
        }
      }

      tld {
        source => "[dns][question][name]"
        target => "[dns][question][tld]"

        add_field => {"[dns][question][top_level_domain]" => "[dns][question][tld][tld]"}
        add_field => {"[dns][question][registered_domain]" => "[dns][question][tld][domain]"}
        add_field => {"[dns][question][subdomain]" => "[dns][question][tld][subdomain]"}

        remove_field => "[dns][question][tld]"
      }
    }
}
