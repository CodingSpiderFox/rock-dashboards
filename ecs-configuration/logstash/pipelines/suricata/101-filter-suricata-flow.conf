filter {
    if [flow] {
      mutate {
        rename => {
          "[flow][bytes_toclient]" => "[destination][bytes]"
          "[flow][bytes_toserver]" => "[source][bytes]"
          "[flow][pkts_toclient]" => "[destination][packets]"
          "[flow][pkts_toserver]" => "[source][packets]"
        }
        remove_field => "[flow][age]"
      }

      # Add bytes so we can get totals
      if [source][bytes] {
        ruby {
          code => "
            src = event.get('[source][bytes]')
            dst = event.get('[destination][bytes]')
            total = (src.nil? ? 0 : src) + (dst.nil? ? 0 : dst)
            event.set('[network][bytes]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_bytes"
        }
      }
      # Add packets so we can get totals
      if [source][packets] {
        ruby {
          code => "
            src = event.get('[source][packets]')
            dst = event.get('[destination][packets]')
            total = (src.nil? ? 0 : src) + (dst.nil? ? 0 : dst)
            event.set('[network][packets]', total)
          "
          tag_on_exception => "_rubyexception-suricata-network_packets"
        }
      }

      if [flow][start] and [flow][end] {
          ruby {
            init => 'require "time"'
            code => '
              s_time = Time.iso8601(event.get("[flow][start]"))
              e_time = Time.iso8601(event.get("[flow][end]"))
              dur = ((e_time - s_time) * 1000000000) 
              event.set("[event][duration]", dur)
            '
            tag_on_exception => "_rubyexception-suricata-event_duration"
          }
      }

      date { 
        match => ["[flow][start]", "ISO8601"]
        target => "[event][start]"
        remove_field => "[flow][start]"
      }

      date { 
        match => ["[flow][end]", "ISO8601"]
        target => "[event][end]"
        remove_field => "[flow][end]"
      }

    }
}
