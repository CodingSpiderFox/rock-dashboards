filter {

  # Lookup community id for bidirectional network events
  if [related][ip] {
      ruby {
        code => 'event.set("[related][ip]", event.get("[related][ip]").uniq)'
        tag_on_exception =>  "_rubyexception-all-related_ip_dedup"
      }
    }
  }

  # Lookup community id for unidirectional network events
  if [client][ip] and ![network][community_id] {
    if [client][ip] and [server][ip] and [network][transport] and [@metadata][client][ip][number_of_ip_addresses] == 1 and [@metadata][server][ip][number_of_ip_addresses] == 1 {
      ruby {
        path => "/etc/logstash/conf.d/ruby/logstash-ruby-filter-community-id.rb"
        script_params => {
          "source_ip_field" => "[client][ip]"
          "dest_ip_field" => "[server][ip]"
          "source_port_field" => "[client][port]"
          "dest_port_field" => "[server][ip]"
          "protocol_field" => "[network][transport]"
          "target_field" => "[network][community_id]"
        }
        tag_on_exception =>  "_rubyexception-all-community_id_unidirectional"
      }
    }
  }

}